# -*- coding: utf-8 -*-
"""pandas_project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q_qH0cAHibElDfJDNq4YOEaHveGTsr1U
"""

!pip list

!pip install pandas

"""**Pandas**"""

import pandas as pd

df=pd.read_csv('/content/sample_data/california_housing_test.csv')

'''
csv nedir python da aldığım bir veri seti virgüllerle ayrılmışsa bu csv dosyasıdır.
'''

type(df)



df

df["total_rooms"]

df.total_rooms

df.total_bedrooms[0]

!pip install datasets #hugging face'in datasets kütüphanesidr

from datasets import load_dataset

load_dataset('lukebarousse/data_jobs')

pip install --upgrade huggingface_hub

!pip install --upgrade datasets
#upgrade  install ettiğim yüklenmişse günceller yüklenmemişse paketi ilk defa yükler

dataset=load_dataset('lukebarousse/data_jobs')

dataset

dataset["train"]

type(dataset["train"])

df=dataset["train"].to_pandas() #burada neden read_csv metodunu  kullanmadık çünkü burada verim zaten normal düzgün bi veri bi dosya
#şeklinde değil o yüzden to_pandas metodunu kullanıyorum.

df

df.info()

df

df.head() #data framin ilk 5 satırını görmenizi sağlar,böylelikle eksik verileri hemencecik görmemizi sağlar.
#daha fazla satır görmek istiyorsak,parantez içinde sayıyı yazabiliriz.

df.head(7)

df.tail()  #dataframin son bikaç satırını görmek için kullanılır.

df.tail(10) #kaç tane son satırlardan görmek istiyorum.

df['job_title_short'].head()

#daha fazla sütun görmek istersem
df[['job_title_short', 'job_location']]

df[['job_title_short', 'job_location']].head()

df.iloc[90]#dataframin 90.satırındaki  verilere erişmek için kullanılır.

df.iloc[90:93]#90 ile  93 arasındaki verileri döndürmek için kullanılır.

df.iloc[90:93,2]#90 ile 93 arasındaki verilerin 2 sütunun getirir.

df.iloc[90:93,0:2]

df[['job_title_short','job_title']].iloc[90:93]

df.job_location.unique()#bir sütundaki benzersiz verileri getirir.

df.job_location=='Germany'

#yukarıda yazdığım kodu df parantezine alırsam pandas dataFrame dönüştürmüş olacağım
df[df.job_location=='Germany']

df[(df.job_location=='Germany') & (df.salary_year_avg>100000)].head(5)

df[(df.job_location=='Germany') & (df.salary_year_avg.notna())]#eğer sütunumda boş bi değer veya geçersiz bi değer varsa false döndürür böylelikle p satır yazılmaz
#değilse true döndürür

df.salary_year_avg.notna()